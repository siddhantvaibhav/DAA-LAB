#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int u, v, weight;
} Edge;

Edge edges[MAX], result[MAX];
int parent[MAX];
int n, e;

int find(int i) {
    while (parent[i])
        i = parent[i];
    return i;
}

int union_set(int i, int j) {
    if (i != j) {
        parent[j] = i;
        return 1;
    }
    return 0;
}

void kruskal() {
    int i, j, u, v, count = 0, total = 0;

    for (i = 0; i < e - 1; i++) {
        for (j = i + 1; j < e; j++) {
            if (edges[i].weight > edges[j].weight) {
                Edge temp = edges[i];
                edges[i] = edges[j];
                edges[j] = temp;
            }
        }
    }

    for (i = 0; i < e; i++) {
        u = find(edges[i].u);
        v = find(edges[i].v);
        if (union_set(u, v)) {
            result[count++] = edges[i];
            total += edges[i].weight;
            if (count == n - 1)
                break;
        }
    }

    printf("Edges in the Minimum Spanning Tree:\n");
    for (i = 0; i < count; i++)
        printf("%d - %d : %d\n", result[i].u, result[i].v, result[i].weight);
    printf("Total weight: %d\n", total);
}

int main() {
    int i;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);

    for (i = 0; i < e; i++) {
        printf("Enter edge %d (u v weight): ", i + 1);
        scanf("%d%d%d", &edges[i].u, &edges[i].v, &edges[i].weight);
    }

    kruskal();
    return 0;
}
